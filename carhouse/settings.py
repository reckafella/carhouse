"""
Django settings for carhouse project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# ignore flake8 errors
# flake8: noqa

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
FALBACK_KEY = 'django-insecure--aj3(f*jpnzx9)59$2mi)^sswvg2(cr29)nyq2dxi5a5cd#51f'
SECRET_KEY = os.environ.get('SECRET_KEY', FALBACK_KEY)


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

DEFAULT_HOSTS = "localhost,127.0.0.1,0.0.0.0"
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', DEFAULT_HOSTS).split(',')
ENVIRONMENT = os.environ.get('ENVIRONMENT', 'development')

if ENVIRONMENT == 'production':
    DEBUG = False
    INSTALLED_APPS = []
    ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', "").split(',')

    SUPABASE_USER = os.environ.get('SUPABASE_USER')
    SUPABASE_DB_NAME = os.environ.get('SUPABASE_DB_NAME')
    SUPABASE_PASSWORD = os.environ.get('SUPABASE_PASSWORD')
    SUPABASE_HOST = os.environ.get('SUPABASE_HOST')
    SUPABASE_PORT = os.environ.get('SUPABASE_PORT')

    CLOUDINARY_CLOUD_NAME = os.environ.get('CLOUDINARY_CLOUD_NAME')
    CLOUDINARY_API_KEY = os.environ.get('CLOUDINARY_API_KEY')
    CLOUDINARY_API_SECRET = os.environ.get('CLOUDINARY_API_SECRET')
else:
    DEBUG = True
    ALLOWED_HOSTS = DEFAULT_HOSTS.split(',')
    INSTALLED_APPS = ['daphne']

# Application definition

INSTALLED_APPS += [
    "django.contrib.admin", "django.contrib.auth",
    "django.contrib.contenttypes", 'django.contrib.sites',
    "django.contrib.sessions", "django.contrib.messages",
    "django.contrib.staticfiles", "django.contrib.sitemaps",
    "corsheaders", "app", 'robots', 'captcha',
    "django_redis", "crispy_forms",
]

# wagtail
INSTALLED_APPS += [
    'wagtail.contrib.forms', 'wagtail.contrib.redirects', 'wagtail.embeds',
    'wagtail.sites', 'wagtail.users', 'wagtail.snippets', 'wagtail',
    'wagtail.images', 'wagtail.search', 'wagtail.admin',
    'modelcluster', 'taggit', 'wagtail.documents'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
    "carhouse.middleware.rate_limit.RateLimitMiddleware",
]

ROOT_URLCONF = 'carhouse.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

ASGI_APPLICATION = 'carhouse.asgi.application'
WSGI_APPLICATION = 'carhouse.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        },
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'carhouse.validators.password_validator.ComplexPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

STATIC_URL = 'static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'
LOGIN_URL = 'login'
LOGOUT_URL = 'logout'

APPEND_SLASH = True

WAGTAIL_SITE_NAME = "Car House"

WAGTAILADMIN_BASE_URL = os.environ.get('WAGTAILADMIN_BASE_URL', 'https://rohn.live')

WAGTAIL_FRONTEND_LOGIN_URL = LOGIN_URL

WAGTAIL_FRONTEND_LOGOUT_URL = LOGOUT_URL

WAGTAIL_FRONTEND_LOGIN_REDIRECT_URL = LOGIN_REDIRECT_URL

WAGTAIL_FRONTEND_LOGOUT_REDIRECT_URL = LOGOUT_REDIRECT_URL

WAGTAILDOCS_EXTENSIONS = [
    'pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt',
    'csv', 'zip', 'rar', 'tar', 'gz', 'bz2', '7z', 'iso',
    'mp3', 'wav', 'ogg', 'flac', 'm4a', 'aac', 'wma',
    'mp4', 'avi', 'mov', 'wmv', 'mkv', 'flv', 'webm',
    '3gp', '3g2', 'm4v', 'asf', 'rm', 'rmvb', 'vob',
]

WAGTAILSEARCH_BACKENDS = {
    'default': {
        'BACKEND': 'wagtail.search.backends.database',
    }
}

WAGTAILADMIN_RICH_TEXT_EDITORS = {
    'default': {
        'WIDGET': 'wagtail.admin.rich_text.DraftailRichTextArea',
        'OPTIONS': {
            'features': ['h2', 'h3', 'h4', 'h5', 'h6', 'bold', 'italic',
                         'ol', 'ul', 'link', 'hr', 'code',
                         'document-link', 'blockquote']
        }
    },
    'full': {
        'WIDGET': 'wagtail.admin.rich_text.DraftailRichTextArea',
        'OPTIONS': {
            'features': ['h2', 'h3', 'h4', 'h5', 'h6', 'bold',
                         'italic', 'ol', 'ul', 'link', 'hr', 'code',
                         'document-link', 'blockquote']
        }
    },
    'minimal': {
        'WIDGET': 'wagtail.admin.rich_text.DraftailRichTextArea',
        'OPTIONS': {
            'features': ['h2', 'h3', 'h4', 'h5', 'h6', 'bold',
                         'italic', 'ol', 'ul', 'link', 'hr', 'code',
                         'document-link', 'blockquote']
        }
    },
}

MAX_UPLOAD_SIZE: int = 15 * 1024 * 1024  # 15MB

ALLOWED_IMAGE_TYPESS: list = [
    'image/jpeg', 'image/png', 'image/gif', 'image/webp',
    'image/svg+xml', 'image/bmp', 'image/tiff', 'image/heif',
    'image/heic', 'image/jpg', 'image/jfif'
]


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Transmission, fuel type, color options for the db selection
TRANSMISSION_CHOICES: dict = {
    "manual": "Manual",
    "automatic": "Automatic",
}

FUEL_TYPE_CHOICES: dict = {
    "petrol": "Petrol",
    "diesel": "Diesel",
    "electric": "Electric",
    "hybrid": "Hybrid",
}

COLOR_CHOICES: dict = {
    "red": "Red",
    "blue": "Blue",
    "green": "Green",
    "black": "Black",
    "white": "White",
}


# CSRF settings
def csrf_failure(request, reason=""):
    """
    Custom CSRF failure view.
    """
    from app.views.auth.auth import CSRFFailureView
    return CSRFFailureView.as_view()(request, reason=reason)

CSRF_FAILURE_VIEW = csrf_failure

RATELIMIT = 1000
