# Generated by Django 5.2.1 on 2025-05-13 17:24

import cloudinary.models
import django.db.models.deletion
import modelcluster.fields
import wagtail.contrib.routable_page.models
import wagtail.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0094_alter_page_locale'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='VehicleCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Vehicle Category',
                'verbose_name_plural': 'Vehicle Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='VehicleFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('icon', models.CharField(blank=True, help_text='Optional CSS class for icon', max_length=50)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='VehicleIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('intro_text', wagtail.fields.RichTextField(blank=True, help_text='Optional introduction text                                to display at the top of the page')),
                ('items_per_page', models.PositiveIntegerField(default=10, help_text='Number of vehicles to display per page')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('year', models.PositiveIntegerField(help_text='Year of manufacture')),
                ('make', models.CharField(help_text='Car manufacturer (e.g., Toyota, Ford)', max_length=100)),
                ('model', models.CharField(help_text='Car model (e.g., Camry, F-150)', max_length=100)),
                ('trim', models.CharField(blank=True, help_text='Model trim (e.g., LX, Sport)', max_length=100)),
                ('price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('sale_price', models.DecimalField(blank=True, decimal_places=2, help_text='Optional discounted price', max_digits=12, null=True)),
                ('mileage', models.PositiveIntegerField()),
                ('vin', models.CharField(blank=True, help_text='Vehicle Identification Number', max_length=17)),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('certified', 'Certified Pre-Owned')], default='used', max_length=20)),
                ('engine', models.CharField(blank=True, help_text='Engine specifications', max_length=100)),
                ('color', models.CharField(choices=[('red', 'Red'), ('blue', 'Blue'), ('green', 'Green'), ('black', 'Black'), ('white', 'White')], max_length=50)),
                ('interior_color', models.CharField(blank=True, max_length=50)),
                ('fuel_type', models.CharField(choices=[('petrol', 'Petrol'), ('diesel', 'Diesel'), ('electric', 'Electric'), ('hybrid', 'Hybrid')], max_length=50)),
                ('transmission', models.CharField(choices=[('manual', 'Manual'), ('automatic', 'Automatic')], max_length=50)),
                ('doors', models.PositiveSmallIntegerField(default=4)),
                ('seats', models.PositiveSmallIntegerField(default=5)),
                ('description', wagtail.fields.RichTextField(blank=True)),
                ('published', models.BooleanField(default=True)),
                ('featured', models.BooleanField(default=False, help_text='Feature this vehicle in prominent areas')),
                ('sold', models.BooleanField(default=False)),
                ('warranty_period', models.PositiveIntegerField(blank=True, help_text='Warranty period in months', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cloudinary_image_id', models.CharField(blank=True, max_length=255, null=True)),
                ('cloudinary_image_url', models.URLField(blank=True, null=True)),
                ('optimized_image_url', models.URLField(blank=True, null=True)),
                ('listed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vehicles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vehicle',
                'verbose_name_plural': 'Vehicles',
                'ordering': ['-created_at'],
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='VehicleCategoryRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicle_relations', to='app.vehiclecategory')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_relations', to='app.vehicle')),
            ],
            options={
                'unique_together': {('vehicle', 'category')},
            },
        ),
        migrations.AddField(
            model_name='vehicle',
            name='categories',
            field=models.ManyToManyField(blank=True, related_name='vehicles', through='app.VehicleCategoryRelation', to='app.vehiclecategory'),
        ),
        migrations.AddField(
            model_name='vehicle',
            name='features',
            field=models.ManyToManyField(blank=True, related_name='vehicles', to='app.vehiclefeature'),
        ),
        migrations.CreateModel(
            name='VehicleGalleryImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
                ('cloudinary_image_id', models.CharField(blank=True, max_length=255, null=True)),
                ('cloudinary_image_url', models.URLField(blank=True, null=True)),
                ('optimized_image_url', models.URLField(blank=True, null=True)),
                ('caption', models.CharField(blank=True, max_length=255)),
                ('alt_text', models.CharField(blank=True, help_text='Alternative text for accessibility', max_length=255)),
                ('sort_order', models.IntegerField(default=0)),
                ('live', models.BooleanField(default=True)),
                ('vehicle', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_images', to='app.vehicle')),
            ],
            options={
                'verbose_name': 'Gallery Image',
                'verbose_name_plural': 'Gallery Images',
                'ordering': ['sort_order', '-id'],
            },
        ),
        migrations.CreateModel(
            name='VehicleReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], help_text='Rating from 1 to 5 stars')),
                ('title', models.CharField(max_length=255)),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='app.vehicle')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SavedVehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('saved_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_vehicles', to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_by', to='app.vehicle')),
            ],
            options={
                'ordering': ['-saved_at'],
                'unique_together': {('user', 'vehicle')},
            },
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['make'], name='app_vehicle_make_e3c3c3_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['model'], name='app_vehicle_model_67e7c4_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['year'], name='app_vehicle_year_162d62_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['price'], name='app_vehicle_price_70318c_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['sold'], name='app_vehicle_sold_c99ae4_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['published'], name='app_vehicle_publish_e27250_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['featured'], name='app_vehicle_feature_75054f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vehiclereview',
            unique_together={('vehicle', 'user')},
        ),
    ]
